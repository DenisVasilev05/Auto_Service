# Generated by Django 5.2.3 on 2025-06-11 10:23

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import service.models
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Certification',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=100)),
                ('issuing_authority', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('validity_years', models.PositiveIntegerField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Equipment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('purchase_date', models.DateField()),
                ('last_maintenance', models.DateField()),
                ('next_maintenance', models.DateField()),
                ('status', models.CharField(choices=[('OPERATIONAL', 'Operational'), ('MAINTENANCE', 'Under Maintenance'), ('REPAIR', 'Needs Repair'), ('RETIRED', 'Retired')], default='OPERATIONAL', max_length=20)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='BaseUser',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user_type', models.CharField(choices=[('ADMIN', 'Administrator'), ('OWNER', 'Owner'), ('MANAGER', 'Manager'), ('CUSTOMER', 'Customer'), ('SUPERVISOR', 'Supervisor'), ('SECRETARY', 'Secretary'), ('TECHNICIAN', 'Technician'), ('STAFF', 'Staff')], max_length=20)),
                ('phone_number', models.CharField(max_length=15)),
                ('address', models.TextField()),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('preferred_contact_method', models.CharField(choices=[('EMAIL', 'Email'), ('PHONE', 'Phone')], default='EMAIL', max_length=10)),
                ('base_user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='service.baseuser')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Employee',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('hire_date', models.DateField()),
                ('salary', models.DecimalField(decimal_places=2, max_digits=10)),
                ('is_active', models.BooleanField(default=True)),
                ('base_user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='service.baseuser')),
                ('supervisor', models.ForeignKey(blank=True, limit_choices_to={'base_user__user_type': 'SUPERVISOR'}, null=True, on_delete=django.db.models.deletion.SET_NULL, to='service.employee')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Appointment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('scheduled_date', models.DateField()),
                ('scheduled_time', models.TimeField()),
                ('actual_start_time', models.DateTimeField(blank=True, null=True)),
                ('actual_end_time', models.DateTimeField(blank=True, null=True)),
                ('status', models.CharField(choices=[('SCHEDULED', 'Scheduled'), ('IN_PROGRESS', 'In Progress'), ('COMPLETED', 'Completed'), ('CANCELLED', 'Cancelled')], default='SCHEDULED', max_length=20)),
                ('notes', models.TextField(blank=True)),
                ('estimated_cost', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('final_cost', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='appointments', to='service.customer')),
                ('assigned_technician', models.ForeignKey(blank=True, limit_choices_to={'base_user__user_type': 'TECHNICIAN'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_appointments', to='service.employee')),
            ],
            options={
                'ordering': ['-scheduled_date', '-scheduled_time'],
            },
        ),
        migrations.CreateModel(
            name='Facility',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=100)),
                ('facility_type', models.CharField(choices=[('OFFICE', 'Office'), ('TUNING', 'Tuning Facility'), ('MAINTENANCE', 'Maintenance Shop'), ('ALIGNMENT', 'Alignment Facility'), ('DIAGNOSTIC', 'Diagnostic Facility'), ('TIRE', 'Tire Shop'), ('PAINT', 'Paint Shop'), ('CARWASH', 'Car Wash')], max_length=20)),
                ('description', models.TextField()),
                ('is_active', models.BooleanField(default=True)),
                ('capacity', models.PositiveIntegerField(default=1)),
                ('equipment', models.ManyToManyField(blank=True, to='service.equipment')),
            ],
            options={
                'verbose_name_plural': 'Facilities',
            },
        ),
        migrations.CreateModel(
            name='EventLog',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('event_type', models.CharField(choices=[('APPOINTMENT_SCHEDULED', 'Appointment Scheduled'), ('APPOINTMENT_CANCELLED', 'Appointment Cancelled'), ('APPOINTMENT_COMPLETED', 'Appointment Completed'), ('FACILITY_CLOSED', 'Facility Closed'), ('FACILITY_REOPENED', 'Facility Reopened'), ('VEHICLE_REGISTERED', 'Vehicle Registered'), ('USER_REGISTERED', 'User Registered'), ('REVIEW_SUBMITTED', 'Review Submitted')], max_length=50)),
                ('description', models.TextField()),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('appointment', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='events', to='service.appointment')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='events', to='service.baseuser')),
                ('facility', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='events', to='service.facility')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='employee',
            name='facility',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='service.facility'),
        ),
        migrations.CreateModel(
            name='FacilityClosure',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('reason', models.TextField()),
                ('is_emergency', models.BooleanField(default=False)),
                ('announced_by', models.ForeignKey(limit_choices_to={'user_type': 'MANAGER'}, null=True, on_delete=django.db.models.deletion.SET_NULL, to='service.baseuser')),
                ('facility', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='closures', to='service.facility')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('subject', models.CharField(max_length=200)),
                ('content', models.TextField()),
                ('priority', models.CharField(choices=[('LOW', 'Low'), ('MEDIUM', 'Medium'), ('HIGH', 'High'), ('URGENT', 'Urgent')], default='MEDIUM', max_length=10)),
                ('is_read', models.BooleanField(default=False)),
                ('reply', models.TextField(blank=True)),
                ('replied_at', models.DateTimeField(blank=True, null=True)),
                ('recipient', models.ForeignKey(limit_choices_to={'user_type': 'SECRETARY'}, on_delete=django.db.models.deletion.CASCADE, related_name='received_messages', to='service.baseuser')),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sent_messages', to='service.baseuser')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('type', models.CharField(choices=[('MAINTENANCE_DUE', 'Maintenance Due'), ('APPOINTMENT_REMINDER', 'Appointment Reminder'), ('STATUS_UPDATE', 'Status Update'), ('REVIEW_REQUEST', 'Review Request'), ('ASSIGNMENT', 'Service Assignment'), ('SCHEDULE_CHANGE', 'Schedule Change')], max_length=50)),
                ('title', models.CharField(max_length=200)),
                ('message', models.TextField()),
                ('is_read', models.BooleanField(default=False)),
                ('related_appointment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='service.appointment')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to='service.baseuser')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('payment_method', models.CharField(choices=[('CREDIT_CARD', 'Credit Card'), ('DEBIT_CARD', 'Debit Card'), ('CASH', 'Cash'), ('BANK_TRANSFER', 'Bank Transfer')], max_length=20)),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('COMPLETED', 'Completed'), ('FAILED', 'Failed'), ('REFUNDED', 'Refunded')], default='PENDING', max_length=20)),
                ('transaction_id', models.CharField(blank=True, max_length=100, null=True, unique=True)),
                ('payment_date', models.DateTimeField(blank=True, null=True)),
                ('appointment', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='payment', to='service.appointment')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RepairShop',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=100)),
                ('address', models.CharField(max_length=200)),
                ('phone', models.CharField(default='+43 1 234 5678', max_length=20)),
                ('email', models.EmailField(max_length=254)),
                ('website', models.URLField(blank=True)),
                ('description', models.TextField(default='Your trusted auto service partner.')),
                ('business_hours', models.JSONField(default=dict)),
                ('tax_id', models.CharField(max_length=50)),
                ('registration_number', models.CharField(default='FN123456a', max_length=50)),
                ('founded_date', models.DateField(default=service.models.get_default_founded_date)),
                ('logo', models.ImageField(blank=True, null=True, upload_to='shop_logos/')),
                ('owner', models.ForeignKey(limit_choices_to={'user_type': 'OWNER'}, on_delete=django.db.models.deletion.PROTECT, to='service.baseuser')),
            ],
            options={
                'verbose_name': 'Repair Shop',
                'verbose_name_plural': 'Repair Shop',
            },
        ),
        migrations.AddField(
            model_name='facility',
            name='repair_shop',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='facilities', to='service.repairshop'),
        ),
        migrations.CreateModel(
            name='Analytics',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('total_revenue', models.DecimalField(decimal_places=2, default=0, max_digits=12)),
                ('total_appointments', models.PositiveIntegerField(default=0)),
                ('average_rating', models.DecimalField(decimal_places=2, default=0, max_digits=3)),
                ('customer_satisfaction', models.DecimalField(decimal_places=2, default=0, max_digits=5)),
                ('total_customers', models.PositiveIntegerField(default=0)),
                ('total_vehicles', models.PositiveIntegerField(default=0)),
                ('facility_utilization', models.JSONField(default=dict)),
                ('technician_performance', models.JSONField(default=dict)),
                ('revenue_by_service', models.JSONField(default=dict)),
                ('peak_hours', models.JSONField(default=dict)),
                ('customer_demographics', models.JSONField(default=dict)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('repair_shop', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='analytics', to='service.repairshop')),
            ],
            options={
                'verbose_name_plural': 'Analytics',
            },
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('rating', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('comment', models.TextField()),
                ('technician_rating', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('technician_comment', models.TextField(blank=True)),
                ('appointment', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='review', to='service.appointment')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Schedule',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('opening_time', models.TimeField(default='09:00')),
                ('closing_time', models.TimeField(default='17:00')),
                ('is_open_weekends', models.BooleanField(default=False)),
                ('max_daily_appointments', models.PositiveIntegerField(default=10)),
                ('facility', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='schedule', to='service.facility')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='employee',
            name='working_hours',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='service.schedule'),
        ),
        migrations.CreateModel(
            name='ServiceType',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('duration_minutes', models.PositiveIntegerField()),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('maintenance_interval_months', models.PositiveIntegerField(blank=True, null=True)),
                ('facility', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='service_types', to='service.facility')),
                ('required_certifications', models.ManyToManyField(blank=True, to='service.certification')),
                ('required_equipment', models.ManyToManyField(blank=True, to='service.equipment')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='employee',
            name='specializations',
            field=models.ManyToManyField(blank=True, related_name='specialists', to='service.servicetype'),
        ),
        migrations.AddField(
            model_name='appointment',
            name='service_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='appointments', to='service.servicetype'),
        ),
        migrations.CreateModel(
            name='TechnicianAvailability',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('date', models.DateField()),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField()),
                ('is_available', models.BooleanField(default=True)),
                ('reason', models.CharField(blank=True, max_length=100)),
                ('technician', models.ForeignKey(limit_choices_to={'base_user__user_type': 'TECHNICIAN'}, on_delete=django.db.models.deletion.CASCADE, related_name='availability_records', to='service.employee')),
            ],
            options={
                'verbose_name_plural': 'Technician Availabilities',
                'ordering': ['date', 'start_time'],
            },
        ),
        migrations.CreateModel(
            name='Vehicle',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('vin', models.CharField(max_length=17, unique=True)),
                ('make', models.CharField(max_length=50)),
                ('model', models.CharField(max_length=50)),
                ('year', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1900), django.core.validators.MaxValueValidator(2026)])),
                ('color', models.CharField(max_length=30)),
                ('license_plate', models.CharField(max_length=15)),
                ('registration_date', models.DateField(blank=True, null=True)),
                ('next_maintenance_date', models.DateField(blank=True, null=True)),
                ('mileage', models.PositiveIntegerField(default=0)),
                ('last_service_date', models.DateField(blank=True, null=True)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='vehicles', to='service.customer')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='appointment',
            name='vehicle',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='appointments', to='service.vehicle'),
        ),
    ]
